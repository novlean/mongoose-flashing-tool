# Release building.
# 'mac' target can be built only on Mac OS X due to lack of usable
# cross-compiler or emulator. 'win' should build on Linux as well.
#
# Dependencies:
# 1) docker installed and functional
# 2) mac: Qt 5 installed and directory with its binaries present in the PATH

# Builds signed Windows and Mac binaries by default. Set to "" to disable.
SIGN = "Cesanta Software Limited"
# Certificate and key are located on secure under the code_sign directory.
# For the Mac build, you should have code.keychain added to the system (use the
# Keychain Access utility). Do not unlock it and do not keep it unlocked,
# you will be asked for the passphrase in due time when signing.
# This also means you have to run build from the GUI terminal (otherwise you'll
# get "user interaction disabled" error).
#
# For the Windows build, you must have the certificate and the (encrypted)
# key files named below in the current directory. Take them from secure.
# You will be asked for the passphrase, so make sure you have that handy too.
SIGN_CERT = code.crt.pem
SIGN_KEY  = code.key.enc.pem

ifneq ($(wildcard common),)
REPO_PATH = $(CURDIR)
MFT_SUBDIR =
else
REPO_PATH = $(CURDIR)/..
MFT_SUBDIR = mft
endif

SRC_DIR = ./src
BIN_DIR = ./bin
OUT_DIR = ./out
QMAKE_ARGS = -config static -config release
FW_META_CMD = $(REPO_PATH)/common/tools/fw_meta.py
VERSION = $(shell $(FW_META_CMD) get src/build_info.json build_version)

.PHONY: clean mac ubuntu32 ubuntu64 win

mac: $(OUT_DIR) $(OUT_DIR)/MongooseFlashingTool-mac-latest.zip
win: $(OUT_DIR) $(OUT_DIR)/MongooseFlashingTool-win-latest.zip
ubuntu32: $(OUT_DIR) $(OUT_DIR)/MFT-ubuntu32-latest.tar.xz
ubuntu64: $(OUT_DIR) $(OUT_DIR)/MFT-ubuntu64-latest.tar.xz

$(OUT_DIR)/MongooseFlashingTool-mac-latest.zip: $(BIN_DIR)/MFT.app
	mv $< "$(BIN_DIR)/Mongoose Flashing Tool.app"
	cd $(BIN_DIR) && \
	  zip -r -9 -y ../$@ "Mongoose Flashing Tool.app"
	cp $@ $(OUT_DIR)/MongooseFlashingTool-mac-$(VERSION).zip

$(OUT_DIR)/MongooseFlashingTool-win-latest.zip: $(BIN_DIR)/MFT.exe
	mv $< "$(BIN_DIR)/Mongoose Flashing Tool.exe"
	cd $(BIN_DIR) && \
	  zip -9 -y ../$@ "Mongoose Flashing Tool.exe"
	cp $@ $(OUT_DIR)/MongooseFlashingTool-win-$(VERSION).zip

$(OUT_DIR)/MFT-ubuntu32-latest.tar.xz: $(BIN_DIR)/MFT-ubuntu32
$(OUT_DIR)/MFT-ubuntu64-latest.tar.xz: $(BIN_DIR)/MFT-ubuntu64

$(OUT_DIR)/MFT-%.tar.xz:
	cd $(BIN_DIR) && tar cvJf ../$@ $(notdir $<)
	cp $@ $(OUT_DIR)/MFT-$*-$(VERSION).tar.xz

$(BIN_DIR) $(OUT_DIR):
	mkdir -p $@

$(BIN_DIR)/MFT.app: $(BIN_DIR) src/build_info.cc
	qmake -config release
	nice make -j $(shell sysctl -n hw.ncpu)
	if [ z$(SIGN) != z ]; then \
	  macdeployqt $(SRC_DIR)/MFT.app -codesign=$(SIGN); \
	  codesign --verify --verbose $(SRC_DIR)/MFT.app; \
	else \
	  macdeployqt $(SRC_DIR)/MFT.app; \
	fi
	mv -f $(SRC_DIR)/MFT.app "$@"
	make distclean

src/build_info.cc: $(FW_META_CMD)
	$(FW_META_CMD) gen_build_info \
	  --tag_as_version=true \
	  --c_output=$@ \
	  --json_output=src/build_info.json

$(BIN_DIR)/MFT.exe: $(BIN_DIR) src/build_info.cc
	docker run --rm -it -v $(REPO_PATH):/src docker.cesanta.com:5000/ourci -lcex '\
	  cd /src/$(MFT_SUBDIR)/src && \
	  wine qmake $(QMAKE_ARGS) && \
	  nice wine mingw32-make -j 3 && \
	  mv -f release/MFT.exe ../$@; \
	  wine mingw32-make distclean 2>/dev/null; \
	  cd .. && \
	  if [ z$(SIGN) != z ]; then \
	    osslsigncode sign \
	      -certs $(SIGN_CERT) -key $(SIGN_KEY) -h sha256 \
	      -n "Mongoose Flashing Tool" \
	      -i https://www.cesanta.com/ \
	      -ts http://tsa.startssl.com/rfc3161 \
	      -in "$@" -out "$@.signed" && \
	    mv "$@.signed" "$@"; \
	  fi; \
	  rm -rf src/release src/Makefile'

ifneq ($(SIGN),)
$(BIN_DIR)/MFT.exe: $(SIGN_CERT) $(SIGN_KEY)
endif

$(SIGN_CERT) $(SIGN_KEY):
	@echo
	@echo $(@) not found. Please copy it manually from secure.
	@echo
	@exit 1

$(BIN_DIR)/MFT-ubuntu%: $(BIN_DIR) src/build_info.cc
	docker run --rm -it -v $(REPO_PATH):/src \
	  docker.cesanta.com:5000/ubuntu$*-qt5static:r1 bash -cx '\
	    cd /src/$(MFT_SUBDIR) && \
	    qmake $(QMAKE_ARGS) && \
	    nice make -j 3 && \
	    mv -f src/MFT $@ && \
	    make distclean'

clean:
	rm -rf $(BIN_DIR) $(OUT_DIR) Makefile src/Makefile*
